<?php
/*
Plugin Name: Amara Embed Filter
Plugin URI: http://jeremyclarke.org/
Description: Filter (YouTube) embed codes and replace the oEmbed output with Amara (Universal Subtitles) embed code for the same video. Add an [embed amara="1"] shortcode around your embed URL to activate.
Author: Jeremy Clarke
Version: 0.1
Author URI: http://jeremyclarke.org/
*/

/**
 * Filter oEmbed HTML to replace it with Amara/Universal Subtitles embed code if 'unisubs="1"' is added to [embed]
 * 
 * Hooks into the [embed] system AFTER oEmbed content has been loaded and looks for 'unisubs' attribute in [embed]
 * If it's found the entire $html is replaced with the Amara embed code for the same video URL. 
 * 
 * Intended to allow Unisub-ification of default embeds, so that we can flag some [embed]s as having universal 
 * subtitles, while protecting ourselves from a fate where Amara goes offline. This way we can disable this
 * filter if unisubs goes offline and posts will still display the default oEmbed code.
 * 
 * @uses amara_display_embed_code() to generate the actual Unisubs embed code.
 * 
 * @param string $html HTML generated by oEmbed system
 * @param string $url URL passed to [embed]. Presumably a video URL.
 * @param array $attr Attributes passed into [embed], we look here for 'unisubs="1"' or 'amara="1"'
 * @param integer $post_ID ID of the post.
 * @return string Unisubs embed code if unisubs=1 or the default HTML the rest of the time.
 */
function amara_oembed_filter($html = '', $url = '', $attr = '', $post_ID = '' ) {
	
	/**
	 * Only act on $html if [embed amara='1'] OR [embed unisubs='1'] was set 
	 */
	if ((isset($attr['amara']) AND $attr['amara']) OR (isset($attr['unisubs']) AND $attr['unisubs'])) :
		return amara_display_embed_code(array(
			'url' => $url,
			'echo' => false,
		));
	endif;
	
	return $html;
}
add_filter('embed_oembed_html','amara_oembed_filter', 10, 4);

/**
 * Show the Amara/Universal Subtitles embed code for a given video URL.
 *
 * Depends on the US embed code API: https://github.com/pculture/unisubs/wiki/Embed-Code-Usage-Guide
 * Does not validate the URL, it must be something that already works with Amara/Universal Subtitles.
 * Notably youtu.be links don't work, full http://youtube.com URLs are mandatory.
 *
 * Uses the 'base_state['language'] embed parameter to try to show the current GV site's language by default.
 *
 * @param array/string $args wp_parse_args. 'url' is the video_url for US, before_after_echo
 * @return string
 */
function amara_display_embed_code($args) {
	$defaults = array(
		'url' => '',
		'before' => '',
		'after' => '',
		'echo' => true
	);
	$args = wp_parse_args($args, $defaults);
	extract($args, EXTR_SKIP);

	/**
	 * Show error if $url isn't a valid URL, this is the only checking we do.
	 */
	if (!amara_check_url($url))
		return amara_before_after_echo("Error: [gvuniversalsubtitles] shortcode was given an invalid url parameter.", $before, $after, $echo);

	/**
	 * Prepare the language code argument if the site has one
	 */
	$lang_code_argument = '';
	$lang_code = apply_filters('amara_lang_code', '');
	if ($lang_code AND !is_wp_error($lang_code))
		$lang_code_argument = ", 'base_state': {'language': '$lang_code'}";

	/**
	 * Prepare the script and it's video_url variable
	 */
	$embed_script = 'http://s3.www.universalsubtitles.org/embed.js';

	$output = '';
	$output .= "<script type='text/javascript' src='$embed_script'>";
	$output .= " ({ video_url: '$url' $lang_code_argument })</script>";
	$output .= "<br class='clear' />";

	return amara_before_after_echo($output, $before, $after, $echo);
}

/**
 * Handle $before $after and $echo parameters for display functions
 *
 * If $output is empty nothing will happen.
 *
 * @param string $output actual stuff to display
 * @param string $before html to show before $output
 * @param string $after html to show after $output
 * @param boolean $echo if FALSE return instead of printing
 */
function amara_before_after_echo ($output, $before = '', $after = '', $echo = TRUE) {

	if (!$output) return;

	$final_output = $before . $output . $after;

	// use $echo to determine if it should be returned or printed
	if (!$echo)
		return $final_output;

	echo $final_output;

	return true;
}

/**
 * Validate a url with the specific intention of ensuring it 'seems' like a
 * link and whether it contains a specific string (like a domain)
 *
 * @param string $url Check if this is a 'valid' url
 * @param string $mandatory_string If given ensure the link contains this string
 * @return string False if URL doesn't qualify, url string if it does
 */
function amara_check_url($url, $mandatory_string = '') {
	// If there's no http then return false, we want them to have pasted in a url!
	if (!strpos($url, 'ttp'))
		return FALSE;
	// This adds http:// so needs to run after check above
	$url = esc_url_raw($url);
	// If we have a mandatory string check for it
	if ($mandatory_string AND !strpos($url, $mandatory_string))
		return FALSE;
	// Make sure it ends in a slash
	if ('/' != substr($url, -1, 1)) $url .= '/';

	return $url;
}

?>
